package java;
/**
 * 类主要做什么的
 * @author admin
 *
 */
public class Design {
	/**
	 * 方法主要做什么的
	 * @param name 
	 * @return
	 */
	
	/**
	 *设计 考虑点：
	 * 1.确认方法名、参数命名、参数类型、返回值类型是否合理(见：1001)
	 * 2.通过命名确认该方法是否应该在该类中(见：1002)
	 * 3.如果有逻辑写入该逻辑 的注释
	 * 4.实际逻辑是否符合方法名，类名的命名(见：1003)
	 * 5.异常情况的处理方案，是否有未知异常
	 * 
	 * 测试考虑点：
	 *    1.参数各种情况下，运行是否合理
	 *    2.该方法的测试跟各种业务无关，就只是测试该方法
	 *    3.测试健壮性、稳定性
	 *         1.参数为空或者各种异常情况
	 *         2.执行时间，比如调用10 0000次用多长时间
	 *         3.如果是查询，预估最大数据的执行时间，比如100万条数据执行多长时间
	 *         4.如果是保存，预估保存失败的可能性
	 * 
	 * 效果：
	 * 保证这个方法谁都会调用，调用都不会报错
	 */
	
	/**
	 * 1001:
	 * 		错误案例1：
	 * 			比如很简单的道理,
	 * 			public List<Model> save(Model){}
	 * 			问题1：保存一个对象，返回一个list,不应该返回list,list给谁用,确认设计失败，只是给自己使用的
	 *      错误案例2：
	 *         public Map check(Model){}
	 *         问题2：一个校验的方法，返回为什么是map?如果别人用，无法用，从map哪取？应该为bolean或者errorModel{isSuccess,errorMsg,errorCode}
	 *1002:
	 *      错误案例：
	 *         UserService.saveActive()
	 *         疑问：用户服务为什么可以保存活动，以后谁知道这个规则？一般会去ActiveService中找
	 *          	 
	 *1003: 
	 *      错误案例：
	 *          addCore(openid)添加积分
	 *          逻辑：实际添加积分，但可能在逻辑里面有判断自己业务的判断，比如 同素材不让让添加不应该在该方法体现。openid为空可以填写
	 *          设计错误，添加积分，就是添加积分，逻辑上可不可以跟自己没关
	 *          设计错误：添加积分，按照常理来说两个参数给谁添加多少分。返回是不是添加成功
	 * 
	 * 
	 */
}
