package java1;

public class Design2 {
/**
 * 1.使类和成员的可访问性最小化
 * （1）首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，
 * 在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。
 * （2）对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。
 * （3）不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。
 * （4）实例域绝对不能是public类型的.
 * 2.注解优先于命名模式
 *  一般使用命名模式表明有些程序元素需要通过某种工具或者框架进行特殊处理。例如，JUnit测试框架原本要求用户一定要用test作为测试方法名称的开头。
 *  命名模式的缺点：1.文字拼写错误导致失败，测试方法没有执行，也没有报错
 *    2.无法确保它们只用于相应的程序元素上，如希望一个类的所有方法被测试，把类命名为test开头，但JUnit不支持类级的测试，只在test开头的方法中生效 
 *  3.没有提供将参数值与程序元素关联起来的好方法。
 *   注解能解决命名模式存在的问题，下面定义一个注解类型指定简单的测试，它们自动运行，并在抛出异常时失败（注意，下面的Test注解是自定义的，不是JUnit的实现）
 */
}
